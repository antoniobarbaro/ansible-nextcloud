---
# installation.yml

- name: installation - ensure nextcloud is unarchived in {{ nextcloud_web_root }}
  unarchive:
    src: '{{ nextcloud_repo_url  }}/nextcloud-{{ nextcloud_version }}.tar.bz2'
    remote_src: true
    dest: '{{ nextcloud_web_root }}/..'

- name: installation - ensure webroot directory has correct permissions
  file:
    path: '{{ nextcloud_web_root }}'
    owner: root
    group: nginx
    recurse: yes
    state: directory

- name: installation - ensure occ is executable
  file:
    path: '{{ nextcloud_web_root }}/occ'
    mode: a+x

- name: installation - ensure directories exist with correct permissions
  file:
    path: '{{ item  }}'
    owner: nginx
    group: nginx
    recurse: yes
    state: directory
  with_items:
    - '{{ nextcloud_web_root }}/apps/'
    - '{{ nextcloud_web_root }}/config/'
    - '{{ nextcloud_web_root }}/themes/'
    - '{{ nextcloud_web_root }}/updater/'

- name: installation - ensure working files directory exist with correct owner
  file:
    path: '{{ item  }}'
    owner: nginx
    group: nginx
    recurse: yes
    state: directory
  with_items:
    - '{{ nextcloud_data_root }}'
  when: not nextcloud_data_root_no_owner 

# funziona se utente nginx appartiene al gruppo assegnato alla cartella data root
- name: installation - ensure working files directory exist without setting owner
  file:
    path: '{{ item  }}'
    recurse: yes
    state: directory
    mode: 0770
  with_items:
    - '{{ nextcloud_data_root }}'
  when: nextcloud_data_root_no_owner 


- name: installation - ensure SELinux file context mapping definitions are correct
  sefcontext:
    target: '{{ item  }}'
    setype: httpd_sys_rw_content_t
  with_items:
    - '{{ nextcloud_data_root }}(/.*)?'
    - '{{ nextcloud_web_root }}/config(/.*)?'
    - '{{ nextcloud_web_root }}/apps(/.*)?'
    - '{{ nextcloud_web_root }}/.htaccess'
    - '{{ nextcloud_web_root }}/.user.ini'
  register:
    sefcontext

- name: installation - restorecon if SELinux file context was changed
  command: '{{ item  }}'
  when: sefcontext.changed
  with_items:
    - 'restorecon -Rv {{ nextcloud_data_root }}'
    - 'restorecon -Rv {{ nextcloud_web_root }}'

- name: installation - set SELinux boolean for redis
  seboolean:
    name: httpd_can_network_connect
    state: yes
    persistent: yes

- name: installation - ensure .users.ini settings are adjusted for large files
  copy: 
    src: user.ini
    dest: '{{ nextcloud_web_root }}/.user.ini'

- name: installation - ensure nextcloud installation is finished
  command: 'php {{ nextcloud_web_root }}/occ maintenance:install --database "mysql" --database-name "{{ nextcloud_mysql_db }}"  --database-user "{{ nextcloud_mysql_user }}" --database-pass "{{ nextcloud_mysql_pw }}" --admin-user "{{ nextcloud_admin_user }}" --admin-pass "{{ nextcloud_admin_pw }}" --data-dir "{{ nextcloud_data_root }}"'
  become: true
  become_user: nginx

- name: installation - ensure trusted domains are set
  command: 'php {{ nextcloud_web_root }}/occ config:system:set trusted_domains {{ item.0 }} --value "{{ item.1 }}"'
  become: true
  become_user: nginx
  with_indexed_items:
    - '{{ nextcloud_trusted_domains  }}'

- name: performance tuning - ensure the nextcloud cronjob exists and runs every 15 min
  cron:
    name: nextcloud
    minute: 15
    user: nginx
    job: 'php -f /var/www/nextcloud/cron.php'

# performance tuning
# https://docs.nextcloud.com/server/12/admin_manual/configuration_server/server_tuning.html

- name: performance tuning - configure APCu for local caching
  command: 'php {{ nextcloud_web_root }}/occ config:system:set memcache.local --value "\OC\Memcache\APCu"'
  become: true
  become_user: nginx

- name: performance tuning - use redis for file locking
  command: 'php {{ nextcloud_web_root }}/occ config:system:set memcache.locking --value "\OC\Memcache\Redis"'
  become: true
  become_user: nginx

- name: performance tuning - connect to redis on localhost
  command: 'php {{ nextcloud_web_root }}/occ config:system:set redis "host" --value "localhost"'
  become: true
  become_user: nginx

- name: performance tuning - connect to redis on port 6379
  command: 'php {{ nextcloud_web_root }}/occ config:system:set redis "port" --value 6379'
  become: true
  become_user: nginx

- name: performance tuning - js and css asset management
  command: 'php {{ nextcloud_web_root }}/occ config:system:set asset-pipeline.enabled --value true'
  become: true
  become_user: nginx
